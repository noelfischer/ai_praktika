{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOFTHX4WGVKqO/cL8xQUWzz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/noelfischer/ai_praktika/blob/main/4/task_2_building_locks_problems\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Ri4j8M5fr4e",
        "outputId": "2a8d94f7-2995-4dec-cbb5-bafe82f85f38"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Output of the network: 0.05500000000000008\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "# Define the ReLU activation function\n",
        "def relu(x):\n",
        "    return np.maximum(0, x)\n",
        "\n",
        "# Define the function for a forward pass through the network\n",
        "def forward_pass(x, W1, b1, W2, b2):\n",
        "    # Step 1: Compute the hidden layer pre-activation (weighted sum)\n",
        "    z_h = np.dot(W1, x) + b1\n",
        "    # Step 2: Apply ReLU activation function to hidden layer\n",
        "    a_h = relu(z_h)\n",
        "\n",
        "    # Step 3: Compute the output layer pre-activation (weighted sum)\n",
        "    z_o = np.dot(W2, a_h) + b2\n",
        "    # Step 4: Apply ReLU activation function to output layer\n",
        "    y = relu(z_o)\n",
        "\n",
        "    return y\n",
        "\n",
        "# Define the input vector x\n",
        "x = np.array([1.0, 0.5])\n",
        "\n",
        "# Define the weights from input to hidden layer\n",
        "W1 = np.array([[0.5, -0.6],\n",
        "               [0.3,  0.8],\n",
        "               [-0.2, 0.1]])\n",
        "\n",
        "# Define the biases for the hidden layer\n",
        "b1 = np.array([0.1, -0.3, 0.2])\n",
        "\n",
        "# Define the weights from hidden to output layer\n",
        "W2 = np.array([0.7, -1.2, 0.5])\n",
        "\n",
        "# Define the bias for the output layer\n",
        "b2 = 0.3\n",
        "\n",
        "# Perform the forward pass to get the output\n",
        "output = forward_pass(x, W1, b1, W2, b2)\n",
        "\n",
        "# Display the output\n",
        "print(\"Output of the network:\", output)\n"
      ]
    }
  ]
}